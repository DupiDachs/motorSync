# !! = Has to be set by user
# !  = May be set by user
# All other variables should not be set manually

[gcode_macro MOTSYNC_VARS]
variable_microstepping: 32 #!! Set this according to your config
variable_fullstep:     0.1 #!! Set this according to your config
variable_number_of_runs: 3 #!! If the synchronization is to be determined for an accuracy of
                           #!! 1/8 fullstep, set to 1. 1/16, set to 2. 1/32, set to 3.
variable_nb_of_buzz: 10 #! Number of buzzes
variable_accel: 10000 #! Acceleration used for buzz, which will determine the speed
                      #! (top speed should not be reached on a 1mm distance)
variable_distance_per_step: 0.00625 # Is calculated automatically
variable_noise_x: 0 # Static x axis noise
variable_noise_y: 0 # Static y axis noise
variable_noise_z: 0 # Static z axis noise
variable_wait: 100 # Time in ms to wait for ADXL results to be written to disk
variable_range: 0.5 # Analyzed interval (minimum must be somewhere in between)
                    # (+/- 0.5 fullstep interval)
variable_axis: 'x' # Axis to be optimized
variable_val: 9999 # Minimum sync factor (initialized with something bad)
variable_pos: 0    # Microstep offset with best synchronization
gcode:
    M118 Nothing to see here. Just storing variables.

[gcode_macro MOTSYNC_HOME_AND_CENTER]
gcode:
    {% if "xy" not in printer.toolhead.homed_axes %}
        G28 X Y
    {% endif %}
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F30000

[gcode_macro MOTSYNC_BUZZ]
gcode:
    # This code buzzes the axis, there is no particular need to adapt for the microstep setting
    # We just need to move the printhead around sufficiently. You may play with nb_of_buzz.
    {% set axis = params.AXIS|default('x') %}
    # To preserve the position, these first two moves cancel out the misalignment caused by the loop
    {% set nb_of_buzz = printer["gcode_macro MOTSYNC_VARS"].nb_of_buzz %}
    {% set accel = printer["gcode_macro MOTSYNC_VARS"].accel %}
    FORCE_MOVE STEPPER=stepper_{axis}1 DISTANCE=1 VELOCITY=500 ACCEL={accel}
    FORCE_MOVE STEPPER=stepper_{axis}1 DISTANCE={-1 - nb_of_buzz*0.0125} VELOCITY=500 ACCEL={accel}
    {% for i in range(0, nb_of_buzz) %}
        {% set distance_forward = 2 - 0.0125 * (2 * i * 80 / nb_of_buzz + 1) %}
        {% set distance_backward = 0.0125 - distance_forward %}
        FORCE_MOVE STEPPER=stepper_{axis}1 DISTANCE={distance_forward } VELOCITY=500 ACCEL={accel}
        FORCE_MOVE STEPPER=stepper_{axis}1 DISTANCE={distance_backward} VELOCITY=500 ACCEL={accel}
    {% endfor %}

[gcode_macro MOTSYNC_MEASURE_AXIS]
gcode:
    {% set axis = params.AXIS|default('x') %}
    # Disable one of the two steppers for the axis and
    # move the printhead with the other motor
    SET_STEPPER_ENABLE STEPPER=stepper_{axis} ENABLE=0
    MOTSYNC_BUZZ AXIS={axis}
    # Wait for buzz to settle
    G4 P250
    # Measure the vibrations created by activating the
    # deactivated motor. This is a good indicator for the sync
    ACCELEROMETER_MEASURE CHIP=adxl345 NAME=motorSync
    SET_STEPPER_ENABLE STEPPER=stepper_{axis} ENABLE=1
    # Wait a bit to make sure to get all required data
    G4 P50
    ACCELEROMETER_MEASURE CHIP=adxl345 NAME=motorSync
    # Wait for file to be written
    G4 P{printer["gcode_macro MOTSYNC_VARS"].wait}

[gcode_macro MOTSYNC_MEASURE_NOISE]
gcode:
    # Wait for move to settle
    G4 P250
    ACCELEROMETER_MEASURE CHIP=adxl345 NAME=motorSync
    # Get data for 100ms
    G4 P100
    ACCELEROMETER_MEASURE CHIP=adxl345 NAME=motorSync
    # Wait for file to be written
    G4 P{printer["gcode_macro MOTSYNC_VARS"].wait}

[gcode_macro MOTSYNC_FIRST_RUN]
gcode:
    # Evaluate the vibrations within the specified range and
    # select the best position obtained by quarter stepping initially
    {% set axis = printer["gcode_macro MOTSYNC_VARS"].axis %}
    {% set halfrange = printer["gcode_macro MOTSYNC_VARS"].range|float %}
    {% set microstepping = printer["gcode_macro MOTSYNC_VARS"].microstepping|int %}
    {% set interval = 2*halfrange/0.25*microstepping/4 %}
    {% set nb_of_runs = 2*halfrange/0.25+1 %}
    {% for i in range(nb_of_runs|round(1)|int) %}
       {% set pos = i*interval/(nb_of_runs|round(1)|int-1)-interval/2 %}
        M118 MOTSYNC: Evaluate synchronization at microstep position {pos}
        MOTSYNC_MOVE_TO_POS AXIS={axis} POS={pos|round(1)}
        MOTSYNC_MEASURE_AXIS AXIS={axis}
        MOTSYNC_EVAL_AXIS VAR=val POS={pos|round(1)}
        MOTSYNC_MOVE_TO_POS AXIS={axis} POS={(-pos)|round(1)}
    {% endfor %}

[gcode_macro MOTSYNC_OPTIMIZE]
gcode:
    # The algorithm evaluates at pos +/- move
    {% set microstepping = printer["gcode_macro MOTSYNC_VARS"].microstepping|int %}
    {% set number_of_runs = printer["gcode_macro MOTSYNC_VARS"].number_of_runs %}
    {% for i in range(number_of_runs|int) %}
        {% set move = microstepping/(8*(2**i)) %}
        MOTSYNC_OPTIMIZE_1 MOVE={move}
    {% endfor %}
    # Move to optimum :)
    MOTSYNC_PRINT_AND_MOVE_TO_OPTIMUM

[gcode_macro MOTSYNC_OPTIMIZE_1]
gcode:
    {% set move = params.MOVE|default(1)|int %}
    {% set axis = printer["gcode_macro MOTSYNC_VARS"].axis %}
    {% set pos = printer["gcode_macro MOTSYNC_VARS"].pos %}
    M118 MOTSYNC: Evaluate synchronization at microstep position {pos+move}
    # Move to best position (pos) and try additional (smaller) step (move)
    MOTSYNC_MOVE_TO_POS AXIS={axis} POS={pos|round(1)}
    MOTSYNC_MOVE_TO_POS AXIS={axis} POS={move|round(1)}
    MOTSYNC_MEASURE_AXIS AXIS={axis}
    MOTSYNC_EVAL_AXIS VAR=val POS={(pos+move)|round(1)}
    MOTSYNC_MOVE_TO_POS AXIS={axis} POS={(-move)|round(1)}

    # Move to best position (pos) and try additional (smaller) step (-move)
    M118 MOTSYNC: Evaluate synchronization at microstep position {pos-move}
    MOTSYNC_MOVE_TO_POS AXIS={axis} POS={(-move)|round(1)}
    MOTSYNC_MEASURE_AXIS AXIS={axis}
    MOTSYNC_EVAL_AXIS VAR=val POS={(pos-move)|round(1)}
    MOTSYNC_MOVE_TO_POS AXIS={axis} POS={move|round(1)}
    MOTSYNC_MOVE_TO_POS AXIS={axis} POS={(-pos)|round(1)}

[gcode_macro MOTSYNC_PRINT_AND_MOVE_TO_OPTIMUM]
gcode:
    {% set axis = printer["gcode_macro MOTSYNC_VARS"].axis %}
    {% set pos = printer["gcode_macro MOTSYNC_VARS"].pos|round(1) %}
    MOTSYNC_MOVE_TO_POS AXIS={axis} POS={pos}
    M118 MOTSYNC: Final {axis} synchronization factor is {printer["gcode_macro MOTSYNC_VARS"].val}
    M118 MOTSYNC: Final position is {pos} microstep(s)

[gcode_macro MOTSYNC_MOVE_TO_POS]
gcode:
    {% set axis = params.AXIS|default('x') %}
    {% set pos = params.POS|default(0)|int %}
    {% set step = printer["gcode_macro MOTSYNC_VARS"].distance_per_step %}
    {% set accel = printer["gcode_macro MOTSYNC_VARS"].accel %}
    FORCE_MOVE STEPPER=stepper_{axis}1 DISTANCE={pos*step} VELOCITY=500 ACCEL=1000
    #M118 {pos*step} mm

[gcode_macro MOTSYNC_SYNC]
gcode:
    {% set microstepping = printer["gcode_macro MOTSYNC_VARS"].microstepping %}
    {% set fullstep = printer["gcode_macro MOTSYNC_VARS"].fullstep %}
    SET_GCODE_VARIABLE MACRO=MOTSYNC_VARS VARIABLE=distance_per_step VALUE={fullstep/microstepping}
    M118 MOTSYNC: Starting AWD motor synchronization for
    M118 MOTSYNC: microstepping of {microstepping} and a fullstep distance of {fullstep} mm.
    
    # Start with X axis
    SET_GCODE_VARIABLE MACRO=MOTSYNC_VARS VARIABLE=axis VALUE="{'x' | pprint | replace("\n", "") | replace("\"", "\\\"")}"
    SET_GCODE_VARIABLE MACRO=MOTSYNC_VARS VARIABLE=val VALUE=9999
    SET_GCODE_VARIABLE MACRO=MOTSYNC_VARS VARIABLE=pos VALUE=0
    # Home and move to center
    M118 MOTSYNC: Home and move to center.
    MOTSYNC_HOME_AND_CENTER
    # Determine noise floor
    M118 MOTSYNC: Measure noise.
    MOTSYNC_MEASURE_NOISE
    MOTSYNC_EVAL_NOISE
    # Start optimization
    M118 MOTSYNC: Optimize for best X position.
    MOTSYNC_FIRST_RUN
    MOTSYNC_OPTIMIZE

    # Repeat for Y axis
    SET_GCODE_VARIABLE MACRO=MOTSYNC_VARS VARIABLE=axis VALUE="{'y' | pprint | replace("\n", "") | replace("\"", "\\\"")}"
    SET_GCODE_VARIABLE MACRO=MOTSYNC_VARS VARIABLE=val VALUE=9999
    SET_GCODE_VARIABLE MACRO=MOTSYNC_VARS VARIABLE=pos VALUE=0
    # Start optimization
    M118 MOTSYNC: Optimize for best Y position.
    MOTSYNC_FIRST_RUN
    MOTSYNC_OPTIMIZE
    M118 MOTSYNC: Done!

[extended_macro MOTSYNC_EVAL_NOISE]
gcode:
    {% set noise_ = get_noise_call() %}
    SET_GCODE_VARIABLE MACRO=MOTSYNC_VARS VARIABLE=noise_x VALUE={noise_[0]}
    SET_GCODE_VARIABLE MACRO=MOTSYNC_VARS VARIABLE=noise_y VALUE={noise_[1]}
    SET_GCODE_VARIABLE MACRO=MOTSYNC_VARS VARIABLE=noise_z VALUE={noise_[2]}
    M118 MOTSYNC: Determined noise as (x,y,z) {noise_}.

[extended_macro MOTSYNC_EVAL_AXIS]
gcode:
    # Here, the python script is run that determines the synchronization
    # based on integrating the vibrations within a certain time span
    {% set pos = params.POS|default(0)|int %}
    {% set val = printer["gcode_macro MOTSYNC_VARS"].val %}
    {% set noise_x = printer["gcode_macro MOTSYNC_VARS"].noise_x %}
    {% set noise_y = printer["gcode_macro MOTSYNC_VARS"].noise_y %}
    {% set noise_z = printer["gcode_macro MOTSYNC_VARS"].noise_z %}
    {% set syncFactor = get_accel_call([noise_x,noise_y,noise_z]) %}
    # If the new syncFactor is better than the old one,
    # then store this new position as best one
    {% if syncFactor < val %}
        SET_GCODE_VARIABLE MACRO=MOTSYNC_VARS VARIABLE=val VALUE={syncFactor}
        SET_GCODE_VARIABLE MACRO=MOTSYNC_VARS VARIABLE=pos VALUE={pos}
    {% endif %}
    M118 MOTSYNC: Synchronization factor is {syncFactor}.